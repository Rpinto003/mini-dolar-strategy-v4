{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mini Dollar Strategy - Data Analysis and Technical Indicators\n",
    "\n",
    "This notebook demonstrates:\n",
    "1. Loading market data\n",
    "2. Calculating technical indicators\n",
    "3. Visualizing price patterns and indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "import sys\n",
    "sys.path.append('..')\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from src.data.loaders.market_data import MarketDataLoader\n",
    "from src.analysis.technical.strategy import TechnicalStrategy\n",
    "\n",
    "# Configure plotting\n",
    "plt.style.use('seaborn')\n",
    "plt.rcParams['figure.figsize'] = [12, 6]\n",
    "sns.set_palette('Set2')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load Market Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Initialize components\n",
    "loader = MarketDataLoader()\n",
    "\n",
    "# Load data\n",
    "data = loader.load_data(\n",
    "    start_date='2023-06-01',\n",
    "    end_date='2023-12-31',\n",
    "    timeframe='5T'\n",
    ")\n",
    "\n",
    "print(f\"Loaded {len(data)} candles\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Calculate Technical Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Initialize strategy\n",
    "strategy = TechnicalStrategy()\n",
    "\n",
    "# Calculate indicators\n",
    "analysis = strategy.calculate_indicators(data)\n",
    "\n",
    "# Show available indicators\n",
    "print(\"Available indicators:\")\n",
    "indicators = [col for col in analysis.columns if col not in ['open', 'high', 'low', 'close', 'volume']]\n",
    "print(indicators)\n",
    "analysis.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Visualize Price and Indicators"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def plot_price_and_mas(df, window=500):\n",
    "    \"\"\"Plot price with moving averages.\"\"\"\n",
    "    recent = df.tail(window)\n",
    "    \n",
    "    plt.figure(figsize=(15, 7))\n",
    "    plt.plot(recent.index, recent['close'], label='Price')\n",
    "    plt.plot(recent.index, recent['ma_fast'], label='Fast MA')\n",
    "    plt.plot(recent.index, recent['ma_slow'], label='Slow MA')\n",
    "    \n",
    "    plt.title('Price and Moving Averages')\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "def plot_rsi(df, window=500):\n",
    "    \"\"\"Plot RSI indicator.\"\"\"\n",
    "    recent = df.tail(window)\n",
    "    \n",
    "    plt.figure(figsize=(15, 4))\n",
    "    plt.plot(recent.index, recent['rsi'])\n",
    "    plt.axhline(y=70, color='r', linestyle='--')\n",
    "    plt.axhline(y=30, color='g', linestyle='--')\n",
    "    \n",
    "    plt.title('RSI Indicator')\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "# Plot indicators\n",
    "plot_price_and_mas(analysis)\n",
    "plot_rsi(analysis)"
   ]
  }
 ]
}